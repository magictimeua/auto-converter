name: Auto Convert and Push and Check Descriptions

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests openai lxml

      - name: Run conversion script
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python convert.py

      - name: Commit and push converted.yml
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add auto-converter/converted.yml
          git commit -m "Auto update converted.yml" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:main

  check-descriptions:
    needs: convert
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Run description checker
        run: |
          pip install lxml

          python3 - <<EOF
          from lxml import etree
          import os

          input_file = "auto-converter/converted.yml"
          output_file = "auto-converter/empty_checker.txt"

          if os.path.exists(output_file):
              with open(output_file, "r", encoding="utf-8") as f:
                  previous_ids = set(line.strip() for line in f if line.strip())
          else:
              previous_ids = set()

          if not os.path.exists(input_file):
              print(f"Error: Input file '{input_file}' not found!")
              exit(1)

          with open(input_file, "r", encoding="utf-8") as f:
              content = f.read()

          if not content.strip().startswith("<root>"):
              content = "<root>\n" + content + "\n</root>"

          root = etree.fromstring(content.encode("utf-8"))

          current_ids = set()

          for offer in root.xpath(".//offer"):
              offer_id = offer.get("id")
              name_el = offer.find("name")
              desc_el = offer.find("description")

              name = name_el.text.strip() if name_el is not None and name_el.text else ""
              desc = desc_el.text.strip() if desc_el is not None and desc_el.text else ""

              if desc == "" or desc == name:
                  current_ids.add(offer_id)

          updated_ids = sorted(current_ids)

          with open(output_file, "w", encoding="utf-8") as out:
              out.write("\n".join(updated_ids))

          print(f"Було: {len(previous_ids)} | Залишилося: {len(updated_ids)} | Видалено: {len(previous_ids - current_ids)} | Додано: {len(current_ids - previous_ids)}")
          EOF
